name: "Development Build"
on: push
 
jobs:

  S3:
    name: Deploy
   
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
      - uses: actions/checkout@master
      - name: Create S3 (aws s3 mb s3://latest-test-our-fita)
        run: |
          aws s3 ls s3://latest-test-our-fita

          
          
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-west-2'
      
 
      - name: Deploy in EC2 (Install Docker)
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
                 
        #  HOST_NAME : ${{ vars.DNS_ADDR }}
        #  HOST_NAME : ec2-34-219-74-168.us-west-2.compute.amazonaws.com 
          HOST_NAME : ec2-54-185-19-93.us-west-2.compute.amazonaws.com 
          USER_NAME : ${{ vars.USER_NAME}}
        run: |
           echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
           ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
           for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done&
           sudo apt-get update&
           sudo apt-get install -y ca-certificates curl gnupg&
           sudo install -m 0755 -d /etc/apt/keyrings&
           sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&
           sudo chmod a+r /etc/apt/keyrings/docker.gpg"
          
              
      - name: Deploy in EC2 (Install Docker)1.5
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
                 
        #  HOST_NAME : ${{ vars.DNS_ADDR }}
        #  HOST_NAME : ec2-34-219-74-168.us-west-2.compute.amazonaws.com 
          HOST_NAME : ec2-54-185-19-93.us-west-2.compute.amazonaws.com 
          USER_NAME : ${{ vars.USER_NAME}}
        run: |
           echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
           ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} 
           echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
           sudo tee /etc/apt/sources.list.d/docker.list > /dev/null   
           
      - name: Deploy in EC2 (Install Docker)2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
                 
        #  HOST_NAME : ${{ vars.DNS_ADDR }}
        #  HOST_NAME : ec2-34-219-74-168.us-west-2.compute.amazonaws.com 
          HOST_NAME : ec2-54-185-19-93.us-west-2.compute.amazonaws.com 
          USER_NAME : ${{ vars.USER_NAME}}
        run: |
           echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
           ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
                
            sudo apt-get update&
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"           

      - name: Deploy in EC2 (Install petclinic from hub)
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
                 
        #  HOST_NAME : ${{ vars.DNS_ADDR }}
        #  HOST_NAME : ec2-34-219-74-168.us-west-2.compute.amazonaws.com 
          HOST_NAME : ec2-54-185-19-93.us-west-2.compute.amazonaws.com 
          USER_NAME : ${{ vars.USER_NAME}}
        run: |
    #       echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
     #      ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
    #            
     #       docker -v&
     #       docker ps&
    #        docker pull vasiliskovs/petclinic:5.3.22&
     #       docker run -d vasiliskovs/petclinic:5.3.22&
   #         docker ps"
            
  Testssssss:  
      
        
        runs-on: ubuntu-latest
        steps:
         
         - name: Check http status code of production site
           env :
               #HOST_NAME : ${{ vars.DNS_ADDR }}
               #  HOST_NAME : ec2-34-219-74-168.us-west-2.compute.amazonaws.com 
              HOST_NAME : ec2-54-185-19-93.us-west-2.compute.amazonaws.com 
           uses: lakuapik/gh-actions-http-status@v1
           with:
            sites: '["http://${HOST_NAME}", "https://${HOST_NAME}"]'
            expected: '[301, 200]'
   
